###################################################################################
# The current file defines different parameters for the analysis of CRISPR loci
# using Polloc (Perl package `Bio::Polloc`).  This format is interpreted by the
# Perl module `Bio::Polloc::Polloc::Config`.
###################################################################################

# This a variable not used by Polloc, but used in the construction of other vars
root = "biome-project/thebio.me/"

# This variable tells Polloc where to look (alternatively) for software exacutables
path = "${.root}bins/"


[ rule ]
# This tells Polloc to use 'CRISPR' as the base of the locus IDs.
glob prefix_id='CRISPR'

# Define the CRISPR variable.
CRISPR = "-ignoreprobable 1"

# Register the CRISPR variable as a Rule of type 'crispr' called 'CRISPRFinder'.
add crispr:CRISPR as 'CRISPRFinder'

# Turn execution on for the CRISPR variable (rule)
set CRISPR executable = 'Yes'


[ GroupCriteria ]
# Create the variable simLimit, later used as minimum similarity for grouping
var num simLimit = 0.9

# Extract flanking sequences (500 nt up- and downstream)
var seq left1 = FEAT1 at [-1, -500..0]
var seq left2 = FEAT2 at [-1, -500..0]
var seq right1 = FEAT1 at [1, 500..0]
var seq right2 = FEAT2 at [1, 500..0]

# Compare flanking sequences
var num leftSim = left1 aln-sim with left2
var num rightSim = right1 aln-sim with right2
var num leftSimR = left1 aln-sim with right2
var num rightSimR = right1 aln-sim with left2

#Â Evaluate if similarity is above the minimum
var bool leftSame = leftSim > simLimit
var bool rightSame = rightSim > simLimit
var bool leftSameR = leftSimR > simLimit
var bool rightSameR = rightSimR > simLimit

# Boolean operations for different orientation cases
var bool same = leftSame | rightSame
var bool sameR = leftSameR | rightSameR
var bool isPair = same | sameR

# Tells Polloc to use 'VNTR' as source loci, and compares them against 'VNTR'
glob source = 'CRISPR'
glob target = 'CRISPR'

# Register isPair variable as the criterion of equivalency (isPair must be boolean)
eval isPair


[ GroupExtension ]
# Create context variable containing parameters of the extension (identification of additional loci)
context = "-function context -upstream 500 -downstream 500 -detectstrand 1 -feature 0 -maxlen 500 -similarity 0.9 -algorithm blast -consensusperc 60 -e 1e-5 -score 200 -p blastn"

# Register context variable as criterion for the groups extension
eval context


[ Typing ]
# Implies a search of predesigned probes over the loci, not the full genomes.
# If you want to perform a full-genome search of the probes (spacers) use the
# 'search_loci' function instead
function = 'get_probes'

# Indicates the method to extract probes from loci (CRISPR).  I.e., indicates
# that strings returned by 'spacers_str' (the list of spacers) should be used
# as the collection of probes.
loci_probes = 'spacers_str'

# Define hybridization as the typing class
eval hybridization

